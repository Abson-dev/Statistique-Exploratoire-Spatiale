///////////////////////////////////////////////////////////////////////////////////////////////
////      ECOLE NATIONALE DE LA STATISTIQUE ET DE L'ANALYSE ECONOMIQUE PIERRE NDIAYE     /////
////          COURS DE STATISTIQUES EXPLORATOIRE ET SPATIALE - ISE1_CYCLE LONG          /////
////                           ENSEIGNANT: MR HEMA                                     /////
////                   TP2_GOOGLE EARTH ENGINE AVEC JAVASCRIPT                        /////
////                  MEMBRES: FOGWOUNG DJOUFACK SARAH-LAURE                         /////
////                           NGUEMFOUO NGOUMTSA CELINA                            /////
////                           NIASS AHMADOU                                       /////
////                           SENE MALICK                                        /////
//////////////////////////////////////////////////////////////////////////////////////

////         ============== CONSIGNE =================

/// SECTION 1 : DONNEES VECTORIELLES 
///     - Importer les pays 
///     - Calculs statistiques: nombre de géométries suivant les levels, superficie de chaque feature, projection, CRS, Extent, centroides
///     - Visualisation
/// SECTION 2 : RASTER
///     - Importer les rasters et visualiser 
///     - Calcul de moyenne, médiane, écart type, minimum, maximum, et retourner une seule image pour chaque statistique


///                               ============== SECTION 1  =================
///                     A- IMPORTATION DES SHAPEFILES 

// Importation des shapefiles et rasters
var  Parasite_Rate_MDG_2022 = ee.Image("projects/ee-fogwoungsarahlauretp2/assets/TP2_StatistiqueExploratoireSpatiale_ENSAE2024_ISEP3/202406_Global_Pf_Parasite_Rate_MDG_2022");
var  Parasite_Rate_MDG_2021 = ee.Image("projects/ee-fogwoungsarahlauretp2/assets/TP2_StatistiqueExploratoireSpatiale_ENSAE2024_ISEP3/202406_Global_Pf_Parasite_Rate_MDG_2021");
var  Parasite_Rate_MDG_2020 = ee.Image("projects/ee-fogwoungsarahlauretp2/assets/TP2_StatistiqueExploratoireSpatiale_ENSAE2024_ISEP3/202406_Global_Pf_Parasite_Rate_MDG_2020");
var  Parasite_Rate_MDG_2019 = ee.Image("projects/ee-fogwoungsarahlauretp2/assets/TP2_StatistiqueExploratoireSpatiale_ENSAE2024_ISEP3/202406_Global_Pf_Parasite_Rate_MDG_2019");
var  Parasite_Rate_MDG_2018 = ee.Image("projects/ee-fogwoungsarahlauretp2/assets/TP2_StatistiqueExploratoireSpatiale_ENSAE2024_ISEP3/202406_Global_Pf_Parasite_Rate_MDG_2018");
var    Madagascar = ee.FeatureCollection("projects/ee-fogwoungsarahlauretp2/assets/TP2_StatistiqueExploratoireSpatiale_ENSAE2024_ISEP3/geoBoundaries-MDG-ADM0");
var    Madagascar_regions = ee.FeatureCollection("projects/ee-fogwoungsarahlauretp2/assets/TP2_StatistiqueExploratoireSpatiale_ENSAE2024_ISEP3/geoBoundaries-MDG-ADM1");
var    Madagascar_provinces = ee.FeatureCollection("projects/ee-fogwoungsarahlauretp2/assets/TP2_StatistiqueExploratoireSpatiale_ENSAE2024_ISEP3/geoBoundaries-MDG-ADM2");
var    Madagascar_arrondissements = ee.FeatureCollection("projects/ee-fogwoungsarahlauretp2/assets/TP2_StatistiqueExploratoireSpatiale_ENSAE2024_ISEP3/geoBoundaries-MDG-ADM3");
var    Madagascar_communes = ee.FeatureCollection("projects/ee-fogwoungsarahlauretp2/assets/TP2_StatistiqueExploratoireSpatiale_ENSAE2024_ISEP3/geoBoundaries-MDG-ADM4");

// Ajout des couches à la carte
// Les découpages administratifs sont successivement regions, provinces, arrondissements et communes 
Map.addLayer(Madagascar, {color: 'red'}, 'Madagascar');
Map.addLayer(Madagascar_regions, {color: 'purple'}, 'Madagascar_regions');
Map.addLayer(Madagascar_provinces, {color: 'green'}, 'Madagascar_provinces');
Map.addLayer(Madagascar_arrondissements, {color: 'yellow'}, 'Madagascar_arrondissements');
Map.addLayer(Madagascar_communes, {color: 'blue'}, 'Madagascar_communes');
Map.centerObject(Madagascar, 4);

///                     B- NOMBRE DE GEOMETRIES POUR CHACUN DES DECOUPAGES ADMINISTRATIFS

// Nombre de géométries au niveau pays 
var geometrie_Madagascar = Madagascar.size();
print('Geometries de la couche Madagascar :', geometrie_Madagascar);

// Nombre de géométries au niveau régions 
var geometrie_Regions = Madagascar_regions.size();
print('Geometries de la couche Madagascar_Regions :', geometrie_Regions);

// Nombre de géométries au niveau provinces 
var geometrie_provinces = Madagascar_provinces.size();
print('Geometries de la couche Madagascar_provinces :', geometrie_provinces);

// Nombre de géométries au niveau arrondissement
var geometrie_arrondissements = Madagascar_arrondissements.size();
print('Geometries de la couche Madagascar_arrondissements :', geometrie_arrondissements);

// Nombre de géométries au niveau communes 
var geometrie_communes = Madagascar_communes.size();
print('Geometries de la couche Madagascar_communes :', geometrie_communes);

///                     C- CALCUL DE SUPERFICIE

// Superficie au niveau pays

      /// First way (the easiest one)
var area = Madagascar.geometry().area({maxError: 1}).divide(1e6); // la superficie renvoyée est de base en metres carrée mais avec les arguments qu'on a mis, on aura l'erreur maximale à 1metre et on a divisé par 10e6 pour convertir en KM CARRES
print('Superficie de la couche Madagascar (en km²) :', area);
    /// Second way , nous allons écrire une fonction qu'on va pouvoir appliquer aux autres découpages administratifs, 
    /// car la méthode précédente ne peut pas être utilisée lorsqu'on a plusieurs features pour le shapefile    

var featuresWithArea = Madagascar.map(function(feature) {
        var area = feature.geometry().area().divide(1e6);  // Convertir en km²
        return feature.set('area_km2', area);  
      }); // Pour chaque feature of the collection: calculer la superficie, convertit en Km2, ajouter comme nouvelle propriété (la propriété sera appelée area_km2)
      featuresWithArea.evaluate(function(fc) { // Pour convertir en un format utilisable dans Javascript
        // Comme ici, c'est le niveau pays, aire=somme des aires dans les différents features.   
        var totalArea = 0;  // On initialise d'abord cette aire à 0
        fc.features.forEach(function(f) {
          var area = f.properties.area_km2;
          print('Superficie de la géométrie_pays (km²) :', area);
          totalArea += area;
        });// Nous parcourons donc toutes les features et sommons les aires
      });
//// EXPLICATION GLOBALE DE CE QUI PRECEDE: On calcule la superficie de chaque zone en Km2, 
      ///  ajouter cette information comme nouvelle propriété à chaque zone
      ///   Parcourir toutes les zones donc et mettre leur superficie

// Superficie au niveau régions

var featuresWithArea = Madagascar_regions.map(function(feature) {
        var area = feature.geometry().area().divide(1e6);  // Convertir en km²
        return feature.set('area_km2', area);  // Ajouter la superficie comme propriété
      });
      featuresWithArea.evaluate(function(fc) {
        var totalArea = 0;
        fc.features.forEach(function(f) {
          var area = f.properties.area_km2;
          print('Superficie de la géométrie_région (km²) :', area);
          totalArea += area;
        });
      });  

//  Superficie au niveau  provinces

var featuresWithArea = Madagascar_provinces.map(function(feature) {
        var area = feature.geometry().area().divide(1e6);  // Convertir en km²
        return feature.set('area_km2', area);  // Ajouter la superficie comme propriété
      });

//  Superficie au niveau arrondissement
var featuresWithArea = Madagascar_arrondissements.map(function(feature) {
        var area = feature.geometry().area().divide(1e6);  // Convertir en km²
        return feature.set('area_km2', area);  // Ajouter la superficie comme propriété
      });
      
//  Superficie au niveau communes
var featuresWithArea = Madagascar_communes.map(function(feature) {
        var area = feature.geometry().area().divide(1e6);  // Convertir en km²
        return feature.set('area_km2', area);  // Ajouter la superficie comme propriété
      });

///                     D- CALCUL DU PERIMETRE DE MADAGASCAR

var perimeter = Madagascar.geometry().perimeter({maxError: 1});
print('Périmètre de la couche Madagascar (en mètres) :', perimeter); 
     
///                     E- AFFICHAGE DU CRS (Projection et datum)

// Pour le shapefile
var projection_Madagascar = Madagascar.geometry().projection();
print('Projection de la couche Madagascar :', projection_Madagascar);
      // SECOND METHOD on transforme en image pour appliquer directement la fonction .projection
var image_Madagascar = ee.Image.pixelLonLat().clip(Madagascar); // Créez une image avec des données de latitude/longitude
var projection_Madagascar2 = image_Madagascar.projection();
print('Projection du raster est :', projection_Madagascar2);
// Pour le raster
var projection_raster = Parasite_Rate_MDG_2018.projection();
print('Projection du raster est :', projection_raster);

///                   F- Taille des pixels : renvoie la taille que represente un pixel dans la réalité, donc si on a 30m ca veut dire que chaque pixel couvre une surface de 30*30 metres carré
// Taille en mètres
var scale = projection_raster.nominalScale();
print('Taille des pixels (mètres) :', scale);
// Taille de l'image en terme de pixels (hauteur et largeur de l'image en pixels)
var imageInfo = Parasite_Rate_MDG_2018.getInfo();
print('Taille de l\'image raster :', imageInfo.bands[0].dimensions);
// Calcul du nombre total de pixels dans le raster 
var pixelCount = Parasite_Rate_MDG_2018.reduceRegion({
  reducer: ee.Reducer.count(),
  geometry: Parasite_Rate_MDG_2018.geometry(),
  scale: scale,
  maxPixels: 1e13
});
print('Nombre total de pixels dans le raster :', pixelCount);

///                   G- Etendue
// Les coordonnées des 4 points du plus petit rectangle dans lequel on peut entierement le Sénegal
var extent = Parasite_Rate_MDG_2018.geometry().bounds();
print('Extent (limites géographiques) de la couche Madagascar :', extent);
// On peut également ressortir les coordonnées de tous les points extremes 
var extent2 = Parasite_Rate_MDG_2018.geometry();
print('Extent (limites géographiques) de la couche Madagascar :', extent2); 
// Extent du shapefile
var extent_Madagascar = Madagascar.geometry().bounds();
print('Extent de la couche Madagascar :', extent_Madagascar);

///                   H- Centroides 

// FONCTION POUR LA VISUALISATION
function addCentroidsLayer(featureCollection, layerName, color) {
      var centroidsLayer = featureCollection.map(function(feature) {
        return ee.Feature(feature.get('centroid'));  // Récupérer le centroïde
      });
    Map.addLayer(centroidsLayer.style({color: color, pointSize: 5}), {}, layerName);
    }

// Au niveau pays
var pays_centroids = Madagascar.map(function(feature) {
        var centroid = feature.geometry().centroid();
        return feature.set('centroid', centroid);  // Ajouter le centroïde aux propriétés
      });
      pays_centroids.evaluate(function(fc) {
        var features = fc.features;
        features.forEach(function(f) {
          var coords = f.properties.centroid.coordinates;
          print('Coordonnées du centroïde_pays:', coords);
        });
      });
addCentroidsLayer(pays_centroids, 'Centroïdes - Pays', 'blue');


// Au niveau régions
      var region_centroids = Madagascar_regions.map(function(feature) {
        var centroid = feature.geometry().centroid();
        return feature.set('centroid', centroid);  // Ajouter le centroïde aux propriétés
      });
      region_centroids.evaluate(function(fc) {
        var features = fc.features;
        features.forEach(function(f) {
          var coords = f.properties.centroid.coordinates;
          print('Coordonnées du centroïde_région:', coords);
        });
      });
addCentroidsLayer(region_centroids, 'Centroïdes - Region', 'yellow');

      
// Au niveau provinces
      var province_centroids = Madagascar_provinces.map(function(feature) {
        var centroid = feature.geometry().centroid();
        return feature.set('centroid', centroid);  // Ajouter le centroïde aux propriétés
      });
addCentroidsLayer(province_centroids, 'Centroïdes - Province', 'red');
      
// Au niveau arrondissement
      var arrondissement_centroids = Madagascar_arrondissements.map(function(feature) {
        var centroid = feature.geometry().centroid();
        return feature.set('centroid', centroid);  // Ajouter le centroïde aux propriétés
      });
addCentroidsLayer(arrondissement_centroids, 'Centroïdes - Arrondissement', 'green');

// Au niveau communes
      var communes_centroids = Madagascar_communes.map(function(feature) {
        var centroid = feature.geometry().centroid();
        return feature.set('centroid', centroid);  // Ajouter le centroïde aux propriétés
      });
addCentroidsLayer(communes_centroids, 'Centroïdes - Commune', 'purple');


///                               ============== SECTION 2  =================

Map.addLayer(Parasite_Rate_MDG_2022, {} ,'Parasite_Rate_MDG_2022');
Map.addLayer(Parasite_Rate_MDG_2021, {} ,'Parasite_Rate_MDG_2021');
Map.addLayer(Parasite_Rate_MDG_2020, {} ,'Parasite_Rate_MDG_2020');
Map.addLayer(Parasite_Rate_MDG_2019, {} ,'Parasite_Rate_MDG_2019');
Map.addLayer(Parasite_Rate_MDG_2018, {} ,'Parasite_Rate_MDG_2018');

//CREATION D'UNE COLLECTION D'IMAGES A PARTIR DE CELLES IMPORTEES
var malariaCollection = ee.ImageCollection([Parasite_Rate_MDG_2022, Parasite_Rate_MDG_2021, Parasite_Rate_MDG_2020, Parasite_Rate_MDG_2019, Parasite_Rate_MDG_2018]);
 
          // AT FIRST, SI ON FAIT CELA SANS ENLEVER LES DONNEES MANQUANTES 
// Calcul de la moyenne
var moyenne = malariaCollection.reduce(ee.Reducer.mean());
print('La moyenne:', moyenne);

// Calcul de la médiane
var mediane = malariaCollection.reduce(ee.Reducer.median());
print('Médiane:', mediane);

// Calcul de l'écart-type
var ecartType = malariaCollection.reduce(ee.Reducer.stdDev());
print('Écart-Type:', ecartType);

// Calcul du minimum
var min = malariaCollection.reduce(ee.Reducer.min());
print('Minimum:', min);

// Calcul du maximum
var max = malariaCollection.reduce(ee.Reducer.max());
print('Maximum:', max);


// POUR LA VISUALISATION
// Concatenons ensemble et dans la variable statistiques, chacune des bandes represente une statistique differente
var statistiques = moyenne.addBands(mediane)
                          .addBands(ecartType)
                          .addBands(min)
                          .addBands(max);

// *** Sélection et renommage des bandes statistiques ***
// Liste des noms originaux des bandes représentant différentes statistiques.
var bandeNames = ['moyenne', 'mediane', 'ecart_type', 'min', 'max'];
// Comptons le nombre de bandes disponibles dans l'image `statistiques`.
var bandeCount = statistiques.bandNames().size();  // Compter le nombre de banades pour chaque stat

// Générons de nouveaux noms pour les bandes si le nombre de bandes correspond.
// Exemple : si 5 bandes sont présentes, elles seront renommées en "statistique_0", "statistique_1", etc.
var nouveauNoms = ee.List.sequence(0, bandeCount.subtract(1)).map(function(i) {
  return ee.String('statistique_').cat(ee.Number(i).format('%d'));  
});

// Renommons les bandes de l'image `statistiques` avec les nouveaux noms générés.
statistiques = statistiques.rename(nouveauNoms);

// Ajoutons les couches pour chaque bande en les associant à un style de visualisation.
Map.centerObject(Madagascar, 6); // Pour centrer la carte sur Madagascar
Map.addLayer(statistiques.select('statistique_0'), {min: 0, max: 1, palette: ['blue', 'green', 'red']}, 'Moyenne');
Map.addLayer(statistiques.select('statistique_1'), {min: 0, max: 1, palette: ['yellow', 'orange', 'brown']}, 'Médiane');
Map.addLayer(statistiques.select('statistique_2'), {min: 0, max: 1, palette: ['white', 'purple']}, 'Écart-Type');
Map.addLayer(statistiques.select('statistique_3'), {min: 0, max: 1, palette: ['green', 'orange']}, 'Min');
Map.addLayer(statistiques.select('statistique_4'), {min: 0, max: 1, palette: ['pink', 'yellow']}, 'Max');

// *** Exportation de l'image résultante ***
Export.image.toDrive({
  image: statistiques, // L'image à exporter (avec les bandes renommées).
  description: 'Statistiques_Malaria_Madagascar', // Nom du fichier exporté.
  scale: 1000,  // Résolution spatiale en mètres.
  region: Madagascar.geometry(),  // Zone géographique d'intérêt (ici, Madagascar).
  fileFormat: 'GeoTIFF'   // Format de fichier (GeoTIFF).
});

          // THE RIGHT WAY: EN NE PAS CONSIDERANT LES VALEURS MANQUANTES
// Masquons les valeurs de -9999 (NA)
var imageSansNA = statistiques.updateMask(statistiques.neq(-9999));

// Calculons des statistiques de l'image sans NA
var maxImage = imageSansNA.reduce(ee.Reducer.max());
var minimumImage = imageSansNA.reduce(ee.Reducer.min());
var medianeImage = imageSansNA.reduce(ee.Reducer.median());
var moyenneImage = imageSansNA.reduce(ee.Reducer.mean());
var ecarttypeImage = imageSansNA.reduce(ee.Reducer.stdDev());

// Utilisons les noms corrects des bandes après renommage
Map.addLayer(moyenneImage, {min: 0, max: 1, palette: ['blue', 'green', 'red']}, 'Moyenne2');
Map.addLayer(medianeImage, {min: 0, max: 0.5, palette: ['yellow', 'orange']}, 'Médiane2');
Map.addLayer(ecarttypeImage, {min: 0, max: 1, palette: ['white', 'purple']}, 'Écart-Type2');
Map.addLayer(minimumImage, {min: 0, max: 0.1, palette: ['red', 'darkblue']}, 'Min2');
Map.addLayer(maxImage, {min: 0, max: 0.1, palette: ['pink', 'red']}, 'Max2');

